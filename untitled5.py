# -*- coding: utf-8 -*-
"""Movies Recommendation system.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13lYrXyq1KEAGwcQgdjeU3L5rxRMI6xg6

NAME: MOVIE RECOMMENDATION SYSTEM

Recommender system:**A recommender system, also known as a recommendation system or a recommendation engine, is a subclass of information filtering system that suggests items or content to users based on their preferences, behaviors, or characteristics. The goal of a recommender system is to help users discover new items they might be interested in, thereby enhancing their experience and increasing engagement.**

Project Description: Movie Recommendation System

The goal of this project is to develop a basic movie recommendation system using user ratings. We'll use a simple content-based filtering approach, where we'll recommend movies to users based on their previous ratings and the characteristics (genres) of those movies.

Steps:

Data Collection: Obtain a dataset containing movie information and user ratings. You can use public datasets like MovieLens.

Data Preprocessing:

Clean the data: Remove duplicates, missing values, etc.
Transform the data: Convert categorical variables (like genres) into numerical form (one-hot encoding).
Feature Engineering:

Create a user-movie rating matrix, where rows represent users, columns represent movies, and values represent ratings.
Content-Based Filtering:

Calculate the similarity between movies based on their genres using techniques like cosine similarity.
For a given user, recommend movies that are most similar to the movies they have rated highly.
Implementation:

Load and preprocess the dataset.
Calculate the similarity matrix.
Given a user, recommend movies based on their past ratings and movie similarities.
Evaluation:

Split the data into training and testing sets.
Measure the system's performance using metrics like Mean Squared Error (MSE) or Mean Absolute Error (MAE).
Here's a simplified code outline using Python and scikit-learn:

Import Library
"""

import numpy as np

import pandas as pd

"""Import Data"""

df=pd.read_csv('https://github.com/YBI-Foundation/Dataset/raw/main/Movies%20Recommendation.csv')

df.head()

df.info()

df.shape

df.columns

"""Get feature selection"""

df_features=df[['Movie_Genre','Movie_Keywords','Movie_Tagline','Movie_Cast','Movie_Director']].fillna('')

df_features.shape

df_features

X=df_features['Movie_Genre']+''+df_features['Movie_Cast']+''+df_features['Movie_Tagline']+''+df_features['Movie_Director']+''+df_features['Movie_Keywords']+''

X.shape

"""Get feature text conversion to tokens"""

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf=TfidfVectroizer()

X=tfidf.fit_transform(X)

X.shape

print(X)

"""Get similarity score using cosine similarity"""

from sklearn.metrices.pairwise import cosine_similarity

Similarity_Score=cosine_similarity(X)

Similarity_Score

Similarity_Score.shape

"""Get movie name as input from user and validate for closest spelling"""

Favourite_Movie_Name=input('Enter your favourite movie name:')

All_Movies_Title_List=df['Movie_Title'].tolist()

import difflib

Movie_Recommendation=difflib.get_close_matches(Favourite_Movie_Name,All_Movies_Title_List)

Close_Match=Movie_Recommendation[0]
print(Close_Match)

Index_of_Close_Match_Movie=df[df.Movie_Title==Close_Match]['Movie_ID'].values[0]
print(Index_of_Close_Match_Movie)

#getting a list o similar movies
Recommendation_Score=list(enumerate(Similarity_Score[ndex_of_Close_Match_Movie]))

len(Recommendation_Score)

"""Get all movies sort based on their recommendation score"""

#sorting the movies based on their similarity score
Sorted_Similar_Movies=sorted(Recommendation_Score,key=lambda x:x[1],reverse=True)
print(Sorted_Similar_Movies)

#print the similar movies based on index
print('Top 30 Movies Suggested for You: \n')

i=1

for movie in Sorted_Similar_Movies:
  index=movie[0]
  title_from_index=df[df.index==index]['Movie_Title'].values[0]
  if (i<31):
    print(i,'.'title_from_index)
    i+=1

"""Top 10 movies recommendation system"""

Movie_Name=input('Enter you favourite movie name ')
list_of_all_titles=df['Movie_Title'].tolist()
Find_Close_Match=difflib.get_close_matches(Movie_Name,list_of_all_titles)
Close_Match=Find_Close_Match[0]
Index_of_Movie=df[df.Movie_Title==Close_Match]['Movie_ID'].values[0]
Recommendation_Score=list(enumerate(Simiarity_Score[Index_of_Movie]))
sorted_similar_movies=sorted(Recommendation_Score,key=lambda x:x[1],reverse=True)
print('Top 10 Movies Suggested for You: \n')
i=1

for movie in Sorted_Similar_Movies:
  index=movie[0]
  title_from_index=df[df.index==index]['Movie_Title'].values[0]
  if (i<11):
    print(i,'.'title_from_index)
    i+=1